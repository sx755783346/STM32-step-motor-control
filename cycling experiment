#include "led.h"
#include "delay.h"
#include "sys.h"
#include "key.h"
#include "usart.h"


//step motor initialization
//P1: motor control pin			        pul+
//P2: motor control pin			        pul-
//P3: motor drive direction pin			dir+
//P4: motor drive direction pin   	dir-
//P5: GPIO selection			     			GPIOX
//P6: motor drive direction         dir
//P7: motor speed                   speed

//Example:
// driverStepper(GPIO_Pin_0,GPIO_Pin_1,GPIO_Pin_2,GPIO_Pin_3, GPIOA,1,100);
void driverStepper(uint16_t pul_Pos, uint16_t pul_Neg, uint16_t dir_Pos, uint16_t dir_Neg, GPIO_TypeDef* GPIOX, int dir, int speed);

//step motor initialization
//P1: motor control pin			    pul+
//P2: motor control pin			    pul-
//P3: motor drive direction			dir+
//P4: motor drive direction			dir-
//P5: GPIO selection			      GPIOX

//Example:
//		initStepper(GPIO_Pin_0,GPIO_Pin_1,GPIO_Pin_2,GPIO_Pin_3,RCC_APB2Periph_GPIOA);
void initStepper(uint16_t pul_Pos, uint16_t pul_Neg, uint16_t dir_Pos, uint16_t dir_Neg, uint32_t RCC_APB2Periph_GPIOX);

#define pul_P GPIO_Pin_6
#define pul_N GPIO_Pin_7
#define dir_P GPIO_Pin_8
#define dir_N GPIO_Pin_9
#define step_angle_pulse_count 3600		//1.8ยกรฃ/pulse, 20:1 gear box
#define delay_time 2000								


int main(void)
 {	

	int cmd_cycle = 0;		            //cycling comand
  int cmd_Reverse = 0;							//backward comand
	int cmd_forward = 0;							//forward comand
	int pulse_Count = 0;							//Pulse count
	int i = 0;
	int j = 0;
	u8 t=0;	  
	int temp_time = delay_time;
	 // initialization
	delay_init();	    	 
	LED_Init();		  	 	
	KEY_Init();          	
	uart_init(115200);	
	LED0=0;					//light up LED
	
	//Initialize the pin that controls the motor
	initStepper(pul_P, pul_N, dir_P, dir_N, RCC_APB2Periph_GPIOC);
	 
	while(1)
	{

		t=KEY_Scan(0);		//get the key value	
		if(cmd_cycle){
			for (j = 0; j < 1000; j++){
				pulse_Count = 0;
				for(i = 0; i < step_angle_pulse_count; i++){
					driverStepper(pul_P, pul_N, dir_P, dir_N, GPIOC,1,5);
					pulse_Count++;
					printf("Cycle forward pulse\t%d\n",pulse_Count);
					//printf("Resolution angle->%f\tdegree\n",pulse_Count*1.8/800/20);
			}
			for(i = step_angle_pulse_count - 1; i > 0 ; i--){
					driverStepper(pul_P, pul_N, dir_P, dir_N, GPIOC,0,5);
					pulse_Count--;
					printf("Cycle backward pulse\t%d\n",pulse_Count);
					//printf("Resolution angle->%f\tdegree\n",pulse_Count*1.8/800/20);
			}
			
		}

		}
		if(cmd_Reverse){
			driverStepper(pul_P, pul_N, dir_P, dir_N, GPIOC,0,7);
			pulse_Count--;
			printf("Reverse pulse\t%d\n",pulse_Count);
			//printf("Reverse angle->%f\tdegree\n",pulse_Count*1.8/800/20);
		}
		if(cmd_forward){
			driverStepper(pul_P, pul_N, dir_P, dir_N, GPIOC,1,7);		
			pulse_Count++;
			printf("Forward pulse\t%d\n",pulse_Count);
			//printf("Forward angle->%f\tdegree\n",pulse_Count*1.8/800/20);
		}
		switch(t)
		{				 
			case KEY0_PRES:
				LED0=!LED0;
				cmd_forward =! cmd_forward; //Forward rotation start/stop
				cmd_cycle = 0;
				cmd_Reverse = 0 ;
				printf("stepper Forward!\n");
				break;
			case KEY1_PRES:
				LED1=!LED1;
				cmd_Reverse =! cmd_Reverse;//Backward rotation start/stop
				cmd_forward = 0;
				cmd_cycle = 0;
				printf("stepper Reverse!\n");
				break;
			case WKUP_PRES:				
				LED0=!LED0;
				LED1=!LED1;
				cmd_cycle =! cmd_cycle;//Cycling start/stop
				cmd_Reverse = 0 ;
				cmd_forward = 0;
				printf("stepper cycle!\n");
				break;
			default:
				delay_ms(10);	
		} 
	}		 
}
 

void initStepper(uint16_t pul_Pos, uint16_t pul_Neg, uint16_t dir_Pos, uint16_t dir_Neg,uint32_t RCC_APB2Periph_GPIOX){
	//GPIO structure pointer
	GPIO_InitTypeDef  GPIO_InitStructure;
	//GPIO clock enable
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOX, ENABLE);
	//Define the GPIO pin
	GPIO_InitStructure.GPIO_Pin = pul_Pos|pul_Neg|dir_Pos|dir_Neg;
	//Define output mode
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	//Define GPIO speed
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//Initialize each pin
	if(RCC_APB2Periph_GPIOX == RCC_APB2Periph_GPIOA)  			{GPIO_Init(GPIOA, &GPIO_InitStructure);GPIO_ResetBits(GPIOA,pul_Pos);GPIO_ResetBits(GPIOA,pul_Neg);GPIO_ResetBits(GPIOA,dir_Pos);GPIO_ResetBits(GPIOA,dir_Neg);}
	else if(RCC_APB2Periph_GPIOX == RCC_APB2Periph_GPIOB)		{GPIO_Init(GPIOB, &GPIO_InitStructure);GPIO_ResetBits(GPIOB,pul_Pos);GPIO_ResetBits(GPIOB,pul_Neg);GPIO_ResetBits(GPIOB,dir_Pos);GPIO_ResetBits(GPIOB,dir_Neg);}
	else if(RCC_APB2Periph_GPIOX == RCC_APB2Periph_GPIOC)		{GPIO_Init(GPIOC, &GPIO_InitStructure);GPIO_ResetBits(GPIOC,pul_Pos);GPIO_ResetBits(GPIOC,pul_Neg);GPIO_ResetBits(GPIOC,dir_Pos);GPIO_ResetBits(GPIOC,dir_Neg);}
}

void driverStepper(uint16_t pul_Pos, uint16_t pul_Neg, uint16_t dir_Pos, uint16_t dir_Neg, GPIO_TypeDef* GPIOX, int dir, int speed){
	if(dir == 1){
		GPIO_SetBits(GPIOX,dir_Pos);
		GPIO_ResetBits(GPIOX,dir_Neg);
			GPIO_SetBits(GPIOX,pul_Pos);
			GPIO_ResetBits(GPIOX,pul_Neg);	
			delay_ms(speed);
			GPIO_ResetBits(GPIOX,pul_Pos);				
			delay_ms(speed);				
	}
	else if(dir == 0){
		GPIO_ResetBits(GPIOX,dir_Pos);
		GPIO_SetBits(GPIOX,dir_Neg);
			GPIO_SetBits(GPIOX,pul_Pos);
			GPIO_ResetBits(GPIOX,pul_Neg);	
			delay_ms(speed);
			GPIO_ResetBits(GPIOX,pul_Pos);				
			delay_ms(speed);			
			
	}
	else{
		return;
	}



}
